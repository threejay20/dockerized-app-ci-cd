name: CI/CD Pipeline for Dockerized Application

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y conntrack curl wget tar

      # Step 3: Install `crictl`
      - name: Install crictl
        run: |
          VERSION="v1.27.1" # Replace with the required version
          wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
          sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
          crictl --version

      # Step 4: Install Container Networking Plugins
      - name: Install containernetworking-plugins
        run: |
          CNI_VERSION="v1.3.0" # Replace with the required version
          wget https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION/cni-plugins-linux-amd64-$CNI_VERSION.tgz
          sudo mkdir -p /opt/cni/bin
          sudo tar -xvf cni-plugins-linux-amd64-$CNI_VERSION.tgz -C /opt/cni/bin/
          ls /opt/cni/bin

      # Step 5: Install Go
      - name: Install Specific Version of Go
        run: |
          GO_VERSION="1.21.1" # Replace with the desired version
          wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
          echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
          export PATH=$PATH:/usr/local/go/bin
          go version

      # Step 6: Install cri-dockerd
      - name: Install cri-dockerd
        run: |
          git clone https://github.com/Mirantis/cri-dockerd.git
          cd cri-dockerd
          mkdir bin
          /usr/local/go/bin/go build -o bin/cri-dockerd
          sudo mv bin/cri-dockerd /usr/local/bin/
          cd ..
          rm -rf cri-dockerd

      # Step 7: Install Minikube
      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      # Step 8: Start Minikube
      - name: Start Minikube
        run: |
          sudo minikube start --driver=none
          sudo minikube status

      # Step 9: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 10: Build Docker Image
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }} .

      # Step 11: Push Docker Image
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/my-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

      # Step 12: Apply Kubernetes Deployment
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s-deployment.yaml
          kubectl rollout status deployment/my-app

      # Step 13: Verify Kubernetes Pods and Services
      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get services
